name: 'akhs-deploy'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kafka

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8090:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=host.docker.internal:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    links:
      - kafka
      - zookeeper
    networks:
      - kafka

  postgres:
    image: postgres:latest
    shm_size: 128mb
    environment:
      - POSTGRES_DB=akhs
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=postgres
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d akhs" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    volumes:
      - ./data/postgresql:/var/lib/postgresql/data/
  redis:
    image: redis:latest
    ports:
      - "6379:6379"

  akhs-configuration:
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: akhs-configurations/build/libs/akhs-configurations-0.0.1.jar
    environment:
      SPRING_PROFILES_ACTIVE: git
    networks:
      - akhs
    ports:
      - "8888:8888"

  akhs-discord:
    restart: always
    depends_on:
      - akhs-configuration
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: akhs-discord/build/libs/akhs-discord-0.0.1.jar
    environment:
      SPRING_PROFILES_ACTIVE: cloud,dev
      CONFIG_SERVER_HOST: host.docker.internal
      POSTGRES_HOST: host.docker.internal
      KAFKA_BOOTSTRAP_SERVERS: host.docker.internal:9092
    networks:
      - akhs
      - kafka

  akhs-telegram:
    restart: always
    depends_on:
      - akhs-configuration
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: akhs-telegram/build/libs/akhs-telegram-0.0.1.jar
    environment:
      SPRING_PROFILES_ACTIVE: cloud,dev
      CONFIG_SERVER_HOST: host.docker.internal
      POSTGRES_HOST: host.docker.internal
      KAFKA_BOOTSTRAP_SERVERS: host.docker.internal:9092
    networks:
      - akhs
      - kafka

  akhs-twitch:
    restart: always
    depends_on:
      - akhs-configuration
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: akhs-twitch/build/libs/akhs-twitch-0.0.1.jar
    environment:
      SPRING_PROFILES_ACTIVE: cloud,dev
      CONFIG_SERVER_HOST: host.docker.internal
      POSTGRES_HOST: host.docker.internal
      KAFKA_BOOTSTRAP_SERVERS: host.docker.internal:9092
    networks:
      - akhs
      - kafka

  akhs-youtube:
    restart: always
    depends_on:
      - akhs-configuration
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: akhs-youtube/build/libs/akhs-youtube-0.0.1.jar
    environment:
      SPRING_PROFILES_ACTIVE: cloud,dev
      CONFIG_SERVER_HOST: host.docker.internal
      POSTGRES_HOST: host.docker.internal
      KAFKA_BOOTSTRAP_SERVERS: host.docker.internal:9092
    networks:
      - akhs
      - kafka

networks:
  kafka:
    driver: bridge
  akhs:
    driver: bridge


